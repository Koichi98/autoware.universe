<launch>
  <arg name="launch_latency_checker" default="true"/>
  <arg name="launch_trajectory_checker" default="true"/>
  <arg name="launch_intersection_collision_checker" default="true"/>
  <arg name="launch_rear_collision_checker" default="true"/>
  <arg name="launch_modules_list_end" default="&quot;&quot;]"/>
  <arg name="planning_validator_launch_modules" default="["/>
  <let
    name="planning_validator_launch_modules"
    value="$(eval &quot;'$(var planning_validator_launch_modules)' + 'autoware::planning_validator::LatencyChecker, '&quot;)"
    if="$(var launch_latency_checker)"
  />
  <let
    name="planning_validator_launch_modules"
    value="$(eval &quot;'$(var planning_validator_launch_modules)' + 'autoware::planning_validator::TrajectoryChecker, '&quot;)"
    if="$(var launch_trajectory_checker)"
  />
  <let
    name="planning_validator_launch_modules"
    value="$(eval &quot;'$(var planning_validator_launch_modules)' + 'autoware::planning_validator::IntersectionCollisionChecker, '&quot;)"
    if="$(var launch_intersection_collision_checker)"
  />
  <let
    name="planning_validator_launch_modules"
    value="$(eval &quot;'$(var planning_validator_launch_modules)' + 'autoware::planning_validator::RearCollisionChecker, '&quot;)"
    if="$(var launch_rear_collision_checker)"
  />
  <let name="planning_validator_launch_modules" value="$(eval &quot;'$(var planning_validator_launch_modules)' + '$(var launch_modules_list_end)'&quot;)"/>

  <arg name="planning_validator_param_path" default="$(find-pkg-share autoware_planning_validator)/config/planning_validator.param.yaml"/>
  <arg name="planning_validator_latency_checker_param_path"/>
  <arg name="planning_validator_trajectory_checker_param_path"/>
  <arg name="planning_validator_intersection_collision_checker_param_path"/>
  <arg name="planning_validator_rear_collision_checker_param_path"/>
  <arg name="input_trajectory" default="/planning/scenario_planning/velocity_smoother/trajectory"/>
  <arg name="input_pointcloud" default="/perception/obstacle_segmentation/pointcloud"/>
  <arg name="input_route_topic_name" default="/planning/mission_planning/route"/>
  <arg name="input_vector_map_topic_name" default="/map/vector_map"/>
  <arg name="output_trajectory" default="/planning/trajectory"/>

  <let name="container_pkg" value="agnocastlib" if="$(var use_agnocast)"/>
  <let name="container_pkg" value="rclcpp_components" unless="$(var use_agnocast)"/>
  <let name="container_exec" value="agnocast_component_container_mt" if="$(var use_agnocast)"/>
  <let name="container_exec" value="$(var container_type)" unless="$(var use_agnocast)"/>

  <!-- Environment variable values based on use_agnocast -->
  <let name="ld_preload_value" value="$(var agnocast_heaphook_path):$(env LD_PRELOAD '')" if="$(var use_agnocast)"/>
  <let name="ld_preload_value" value="$(env LD_PRELOAD '')" unless="$(var use_agnocast)"/>
  <let name="mempool_size" value="8589934592" if="$(var use_agnocast)"/>
  <let name="mempool_size" value="0" unless="$(var use_agnocast)"/>

  <group>
    <node_container pkg="$(var container_pkg)" exec="$(var container_exec)" name="behavior_planning_container" namespace="" args="" output="both">
      <env name="LD_PRELOAD" value="$(var ld_preload_value)"/>
      <env name="AGNOCAST_MEMPOOL_SIZE" value="$(var mempool_size)"/>
      <composable_node pkg="autoware_glog_component" plugin="autoware::glog_component::GlogComponent" name="glog_component" namespace=""/>
      <composable_node pkg="autoware_planning_validator" plugin="autoware::planning_validator::PlanningValidatorNode" name="planning_validator" namespace="">
        <remap from="~/input/pointcloud" to="$(var input_pointcloud)"/>
        <remap from="~/input/trajectory" to="$(var input_trajectory)"/>
        <remap from="~/input/lanelet_map_bin" to="$(var input_vector_map_topic_name)"/>
        <remap from="~/input/route" to="$(var input_route_topic_name)"/>
        <remap from="~/input/kinematics" to="/localization/kinematic_state"/>
        <remap from="~/input/acceleration" to="/localization/acceleration"/>
        <remap from="~/output/trajectory" to="$(var output_trajectory)"/>
        <remap from="~/output/validation_status" to="~/validation_status"/>
        <param name="launch_modules" value="$(var planning_validator_launch_modules)"/>
        <param from="$(var planning_validator_param_path)"/>
        <param from="$(var planning_validator_latency_checker_param_path)"/>
        <param from="$(var planning_validator_trajectory_checker_param_path)"/>
        <param from="$(var planning_validator_intersection_collision_checker_param_path)"/>
        <param from="$(var planning_validator_rear_collision_checker_param_path)"/>
        <extra_arg name="use_intra_process_comms" value="false"/>
      </composable_node>
    </node_container>
  </group>
</launch>
